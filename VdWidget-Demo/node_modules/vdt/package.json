{
  "name": "vdt",
  "version": "0.3.5",
  "description": "A template engine based on virtual-dom",
  "main": "src/index",
  "scripts": {
    "build": "browserify src/browserify.js -o dist/vdt.js -s Vdt && uglifyjs dist/vdt.js -o dist/vdt.min.js -m",
    "test": "mocha --compilers coffee:coffee-script/register test/*.coffee"
  },
  "dependencies": {
    "dom-delegator": "^13.1.0",
    "lodash": "^3.7.0",
    "virtual-dom": "^2.0.1"
  },
  "devDependencies": {
    "benchmark": "^1.0.0",
    "coffee-script": "^1.9.2",
    "handlebars": "^3.0.2",
    "jquery": "^2.1.3",
    "mocha": "^2.2.4",
    "mustache": "^2.0.0",
    "platform": "^1.3.0",
    "should": "^6.0.1",
    "todomvc-app-css": "^2.0.1",
    "todomvc-common": "^1.0.1",
    "underscore": "^1.8.3"
  },
  "readme": "# Vdt.js\n\n> vdt is short for virtual-dom template\n\n`Vdt` is a template engine based on virtual-dom technology.\nIt is inspired by [React](https://github.com/facebook/react)/[virtual-dom](https://github.com/Matt-Esch/virtual-dom),\nand uses [JSX](https://facebook.github.io/react/docs/jsx-in-depth.html) as template syntax.\n\nSee [TodoMVC](http://javey.github.io/vdt-todomvc/) implemented by `Vdt`\n\n# Features\n\n* Just the ui. Just the template further more. But more powerful than common template.\n* Virtual-dom. Diff update unlike [Handlebars](https://github.com/daaain/Handlebars)/[mustache.js](https://github.com/janl/mustache.js).\n* Lightweight. Rewrite a compiler instead of [jstransform](https://github.com/facebook/jstransform). Discard ES6 syntax sugar and JS analysis, so it's faster.\n* Template can be extended. `<t:template>` `<b:block>`\n* Easy to use. You can use it with any other js library, such as jQuery. See [vdt-todomvc](https://github.com/Javey/vdt-todomvc)\n\n# Install\n\n```shell\nnpm install vdt --save\n```\n\n# Example\n\n[demo](http://javey.github.io/vdt/demo.html)\n\n```html\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>vdt template engine demo</title>\n</head>\n<body>\n<script type=\"text/vdt\" id=\"template\">\n    var a = 1, // this is a\n        showInfo = function(index, name) {\n            alert('Click ' + index + ' ' + name);\n        }\n    <div class=\"users\">\n        <input value={input} ev-change={add} ev-input={change}/> input: {input}\n        <ul>\n            {/* output users */}\n            {users.map(function(user, index) {\n                return <li className=\"user\" id={user.id} ev-click={\n                    // use es5's bind or underscore's bind to pass arguments\n                    showInfo.bind(null, index, user.name)\n                    // or closure\n                    /*function() {\n                        showInfo(index, user.name);\n                    }*/\n                }>{index}: {user.name}</li>\n            })}\n        </ul>\n        {/* custom attributes */}\n        <div attributes={{'data-a': a, input: input}} id={a} ev-dblclick={function() {console.log('Dblclick')}}>this is a({a})</div>\n    </div>\n</script>\n<script type=\"text/javascript\" src=\"../dist/vdt.js\"></script>\n<script type=\"text/javascript\">\n    var vdt = Vdt(document.getElementById('template').innerHTML),\n        model = {\n            users: [\n                {name: 'John', id: '1'},\n                {name: 'Javey', id: '2'},\n                {name: 'Tom', id: '3'},\n                {name: 'Sarah', id: '4'}\n            ],\n            input: '',\n\n            add: function(e) {\n                model.users.push({name: e.target.value, id: model.users.length});\n                model.input = '';\n                vdt.update();\n            },\n\n            change: function(e) {\n                model.input = e.target.value;\n                vdt.update();\n            }\n        };\n\n    document.body.appendChild(vdt.render(model));\n</script>\n</body>\n</html>\n```\n\n# Custom attributes\n\nSee [vnode.md](https://github.com/Matt-Esch/virtual-dom/blob/7cd99a160f8d7c9953e71e0b26a740dae40e55fc/docs/vnode.md#custom-attributes-data-)\n\nYou can write template like this to render custom attributes directly.\n\n```html\n<div attributes={{'data-a': a, input: input}} id={a}>this is a({a})</div>\n```\n\n# Notice\n\n1. ~~Use `className` instead of `class` in html.~~\n2. ~~All html tags must be closed. e.g. `<input />`.~~\n3. Use `{/* comment */}` instead of `<!-- comment -->`. It is just Javascript comment which is wrapped by `{}`.\n4. The last html element will be returned. You must wrap all html in a element. e.g.\n\n    ```html\n    <div>\n        <h1>title</h1>\n        <div>body</div>\n    </div>\n    ```\n    instead of\n    ```html\n    <h1>title</h1>\n    <div>body</div>\n    ```\n    The second one will return only one element `<div>body</body>`.\n\n# Express middleware\n\nTake vdt as a express middleware.\n\n```javascript\napp.use(require('vdt').middleware({\n    src: 'vdt/src/path',\n    amd: true, // and amd wrapper\n    force: false, // force compile\n    autoReturn: true // see api of `Vdt` below\n}));\n```\n\n# Escape & Unescape\n\nAny output will be escaped. If you want prevent it, you can do it likes below:\n\n```javascript\nvar a = '<h1>title</h1>';\n<div>{a}</div> // a will be escaped, -> <div>&lt;h1&gt;title&lt;/h1&gt;</div>\n<div innerHTML={a}></div> // a will not be escaped -> <div><h1>title</h1></div>\n```\n\n# Event\n\nYou can bind event in `vdt` template directly by adding `ev-event` property, likes below:\n\n```javascript\n<ul>\n    {/* output users */}\n    {users.map(function(user, index) {\n        return <li className=\"user\" id={user.id} ev-click={\n            // use es5's bind or underscore's bind to pass arguments\n            showInfo.bind(null, index, user.name)\n            // or closure\n            /*function() {\n                showInfo(index, user.name);\n            }*/\n        }>{index}: {user.name}</li>\n    })}\n</ul>\n```\n\n# Template Extend\n\nVdt template can be extended. Use `<t:template>` and `<b:block>` directive.\n\nUse `<t:template>` to extend the parent template function. `template` is a function of parent template.\n\nUse `<t:block`> to set block which can be filled by child.\n\nUse `parent()` to get parent content.\n\n1. **`parent` is a keyword for referencing parent block, so don't name template function as `parent`.**\n2. **`<t:template>` can be nested in `<t:block>`; `<b:block>` can be nested in `<b:block>`.**\n\n```jsx\n<script type=\"text/vdt\" id=\"parent\">\n    <div className=\"card\">\n        <div className=\"head\">{title}</div>\n        <b:body>\n            <div>parent body</div>\n        </b:body>\n        <b:footer>\n            <div>parent footer</div>\n        </b:footer>\n    </div>\n</script>\n```\n\n```jsx\n<script type=\"text/vdt\" id=\"child\">\n    // You can also compile it in node, then require it by require.js\n    var father = Vdt.compile(document.getElementById('parent').innerHTML);\n    <t:father title=\"child card title\">\n        <b:body>\n            <div>child body</div>\n        </b:body>\n        <b:footer>\n            {parent()}\n            <div>child footer</div>\n        </b:footer>\n    </t:father>\n</script>\n```\n\n# Api\n\n## Vdt(source, [options])\n\nCompile `source` then return a vdt object.\n\n* @param `source` {String|Function} JSX template source or a template function returned by `Vdt.compile`\n* @param `options.autoReturn=true` {Object|Boolean} If add `return` keyword at end or not. The last element of template have to be a `html tag element` if is `true`.\n* @return {Object} a vdt object\n\n## Vdt.compile(source, [options])\n\nCompile JSX template source then return a template function which should pass to `Vdt`.\n\nThe returned function has a property named source. You can use it to pre-process JSX.\n\n* @param `source` {String} JSX template source\n* @param `options.autoReturn=true` {Object|Boolean} If add `return` keyword at end or not. The last element of template have to be a `html tag element` if is `true`.\n* @return {Function} a template function should pass to `Vdt`.\n\n### template.source\n\nThe source code of template function.\n\n## The `vdt` object\n\nThe object returned by `Vdt`.\n\n### vdt.render(data)\n\nHandle data and return a dom.\n\n* @param `data` {Object} data passed to template\n* ~~@param `thisArg` {Object} the binding of this in template.~~ `this` is `data` in template.\n* @return {Dom} html dom\n\n### vdt.update([data])\n\nUpdate the dom using the new data.\n\n* @param `data` {Object} the whole data passed to template. If it is not provided, `vdt.data` will be used.\n* @return {Dom} html dom which has updated\n\n### vdt.data\n\nThe data passed to vdt above. So you can modify it directly.\n\n## Vdt.parse(source)\n\nParse JSX template to an ast object\n\n* @param `source` {String} JSX template source\n* @return {Object} abstract syntax tree object\n\n## Vdt.stringify(ast)\n\nStringify the ast object to hscript string.\n\n* @param `ast` {Object} abstract syntax tree object\n* @return {String} hscript string with a return expression at end\n\n## Vdt.virtualDom\n\nThe object exported by [virtual-dom](https://github.com/Matt-Esch/virtual-dom) module.\n\n# Benchmark\n\nSee [Benchmark](http://javey.github.io/vdt/benchmark/benchmark.html)\n\n## Render(compile every time)\n\n* Vdt.js#render x 5,454 ops/sec ±2.40% (89 runs sampled)\n* Lodash#render x 2,390 ops/sec ±3.68% (81 runs sampled)\n* Underscore#render x 6,035 ops/sec ±5.86% (81 runs sampled)\n* Handlebars#render x 959 ops/sec ±6.16% (77 runs sampled)\n* Mustache#render x 4,899 ops/sec ±6.09% (84 runs sampled)\n\n__Fastest is Underscore#render__\n\n## Update(cache compiled result)\n\n* Vdt.js#update x 14,724 ops/sec ±3.61% (87 runs sampled)\n* Lodash#update x 7,734 ops/sec ±2.70% (84 runs sampled)\n* Underscore#update x 7,989 ops/sec ±4.52% (89 runs sampled)\n* Handlebars#update x 7,200 ops/sec ±2.63% (86 runs sampled)\n* Mustache#update x 7,747 ops/sec ±2.40% (96 runs sampled)\n\n__Fastest is Vdt.js#update__",
  "readmeFilename": "README.md",
  "gitHead": "f6d6dc57a7ac04725a4e7a8cb4e48ffa25367845",
  "_id": "vdt@0.3.5",
  "_shasum": "dfb4f3f0397b81aadd889605fb85ca65f5056149",
  "_from": "vdt@0.3.5"
}
