{
  "name": "vdt.js",
  "version": "0.0.4",
  "description": "A template engine based on virtual-dom",
  "main": "src/vdt",
  "dependencies": {
    "virtual-dom": "^2.0.1"
  },
  "scripts": {
    "build": "browserify src/vdt.js -o dist/vdt.js -s Vdt && uglifyjs dist/vdt.js -o dist/vdt.min.js -m",
    "test": "mocha --compilers coffee:coffee-script/register test/*.coffee"
  },
  "devDependencies": {
    "coffee-script": "^1.9.2",
    "jquery": "^2.1.3",
    "mocha": "^2.2.4",
    "should": "^6.0.1",
    "todomvc-app-css": "^2.0.1",
    "todomvc-common": "^1.0.1"
  },
  "readme": "# Vdt.js\n\n> vdt is short for virtual-dom template\n\n`Vdt.js` is a template engine based on virtual-dom technology.\nIt is inspired by [React](https://github.com/facebook/react)/[virtual-dom](https://github.com/Matt-Esch/virtual-dom),\nand uses [JSX](https://facebook.github.io/react/docs/jsx-in-depth.html) as template syntax.\n\n[TodoMVC](http://javey.github.io/vdt-todomvc/) uses `Vdt.js`\n\n# Features\n\n* Just the ui. Just the template further more. But more powerful than regular template.\n* Virtual-dom. Diff update unlike [Handlebars](https://github.com/daaain/Handlebars)/[mustache.js](https://github.com/janl/mustache.js).\n* Lightweight. Rewrite a compiler instead of [jstransform](https://github.com/facebook/jstransform). Discard ES6 syntax sugar and JS analysis, so it's faster.\n* Easy to use. You can use it with any other js library, such as jQuery. See [vdt-todomvc](https://github.com/Javey/vdt-todomvc)\n\n# Example\n\n[demo](http://javey.github.io/vdt/demo.html)\n\n```html\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n    <meta charset=\"UTF-8\">\n    <title>vdt template engine demo</title>\n</head>\n<body>\n<script type=\"text/vdt\" id=\"template\">\n    var a = 1;\n    <div className=\"users\">\n        <input id=\"add\" value={input} /> input: {input}\n        <ul>\n            {users.map(function(user, index) {\n                return <li className=\"user\" id={user.id}>{index}: {user.name}</li>\n            })}\n        </ul>\n        <div>this is a({a})</div>\n    </div>\n</script>\n<script type=\"text/javascript\" src=\"../dist/vdt.js\"></script>\n<script type=\"text/javascript\">\n    var data = {\n        users: [\n            {name: 'John', id: '1'},\n            {name: 'Javey', id: '2'},\n            {name: 'Tom', id: '3'},\n            {name: 'Sarah', id: '4'}\n        ],\n        input: ''\n    };\n\n    var str = document.getElementById('template').innerHTML,\n        vdt = Vdt(str),\n        dom = vdt.render(data);\n\n    document.body.appendChild(dom);\n\n    var input = document.getElementById('add');\n    input.addEventListener('input', function(e) {\n        data.input = e.target.value;\n        vdt.update(data);\n    });\n    input.addEventListener('change', function(e) {\n        data.users.push({name: e.target.value, id: data.users.length});\n        data.input = '';\n        vdt.update(data);\n    });\n</script>\n</body>\n</html>\n```\n\n# Api\n\n## Vdt(source)\n\nCompile `source` then return a vdt object.\n\n* @param `source` {String|Function} JSX template source or a template function returned by `Vdt.compile`\n* @return {Object} a vdt object\n\n## Vdt.compile(source)\n\nCompile JSX template source then return a template function which should pass to `Vdt`.\n\nThe returned function has a property named source. You can use it to pre-process JSX.\n\n* @param `source` {String} JSX template source\n* @return {Function} a template function should pass to `Vdt`.\n\n### template.source\n\nThe source code of template function.\n\n## The `vdt` object\n\nThe object returned by `Vdt`.\n\n### vdt.render(data, [thisArg])\n\nHandle data and return a dom.\n\n* @param `data` {Object} data passed to template\n* @param `thisArg` {Object} the binding of this in template\n* @return {Dom} html dom\n\n### vdt.update(data)\n\nUpdate the dom using the new data.\n\n* @param `data` {Object} the whole data passed to template\n* @return {Dom} html dom which has updated\n\n## Vdt.parse(source)\n\nParse JSX template to an ast object\n\n* @param `source` {String} JSX template source\n* @return {Object} abstract syntax tree object\n\n## Vdt.stringify(ast)\n\nStringify the ast object to hscript string.\n\n* @param `ast` {Object} abstract syntax tree object\n* @return {String} hscript string with a return expression at end\n\n## Vdt.virtualDom\n\nThe object exported by [virtual-dom](https://github.com/Matt-Esch/virtual-dom) module.\n",
  "readmeFilename": "README.md",
  "gitHead": "fc9cbe0890b59b09d5deb32505a9b39c399192d2",
  "_id": "vdt.js@0.0.4",
  "_shasum": "2de33db8752d3a582a52c1f20e0eee90af2f01ba",
  "_from": "vdt.js@>=0.0.1 <0.1.0"
}
